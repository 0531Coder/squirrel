{"name":"Squirrel","tagline":"squirrel-foundation provided an easy use, type safe and highly extensible state machine implementation for Java.","body":"squirrel-foundation\r\n========\r\n\r\n## What is it?  \r\n**squirrel-foundation** provided an easy use, type safe and highly extensible **state machine** ([Wikipedia] [1]) implementation for Java.  \r\n\r\n## Maven  \r\nsquirrel-foundation has been deployed to maven central repository, so you only need to add following  dependency to the pom.xml.\r\n```maven\r\n<dependency>\r\n\t<groupId>org.squirrelframework</groupId>\r\n  \t<artifactId>squirrel-foundation</artifactId>\r\n  \t<version>0.1.7</version>\r\n</dependency>\r\n``` \r\n\r\n## Getting Started \r\n\r\n**squirrel-foundation** supports both fluent API and declarative manner to declare a state machine, and also enable user to define the action methods in a straightforward manner. \r\n\r\n* **StateMahcine** interface takes four generic type parameters.  \r\n\t* **T** stands for the type of implemented state machine.\r\n\t* **S** stands for the type of implemented state.\r\n\t* **E** stands for the type of implemented event.\r\n\t* **C** stands for the type of implemented external context.\r\n\r\n* **State Machine Builder**  \r\n\t* The StateMachineBuilder is composed of *TransitionBuilder which is used to build transition between states and EntryExitActionBuilder which is used to build the actions during entry or exit state. \r\n\t* The internal state is implicitly built during transition creation or state action creation. In order to create a state machine, user need to create state machine builder first. For example: \r\n\t\t\r\n\t```java\r\n\tStateMachineBuilder<ConventionalStateMachine, MyState, MyEvent, MyContext> builder =\r\n\t\tStateMachineBuilderImpl.newStateMachineBuilder(ConventionalStateMachine.class, \r\n\t\tMyState.class, MyEvent.class, MyContext.class);\r\n\t```\r\n\r\n* **Fluent API**  \r\nAfter state machine builder was created, we can use fluent API to define state/transition/action of the state machine.\r\n```java\r\nbuilder.externalTransition().from(MyState.A).to(MyState.B).on(MyEvent.GoToB);\r\n```\r\nAn **external transition** is built from state 'A' to state 'B' on event 'GoToB'.\r\n```java\r\nbuilder.internalTransition().within(MyState.A).on(MyEvent.WithinA).perform(myAction);\r\n```\r\nAn **internal transition** is build inside state 'A' on event 'WithinA' perform 'myAction'. The internal transition means after transition complete, no state is exited or entered.\r\n```java\r\n\tbuilder.externalTransition().from(MyState.C).to(MyState.D).on(MyEvent.GoToD).when(\r\n\t\tnew Condition<MyContext>() {\r\n            @Override\r\n            public boolean isSatisfied(MyContext context) {\r\n                return context!=null && context.getValue()>80;\r\n            }\r\n    });\r\n```\r\nAn **conditional transition** is built from state 'C' to state 'D' on event 'GoToD' when external context satisfied the condition restriction.\r\n```java\r\nbuilder.onEntry(MyState.A).perform(Lists.newArrayList(action1, action2))\r\n```\r\nA list of state entry actions is defined.\r\n\r\n* **Method Call Action**  \r\n\tUser can define actions during define transitions or state entry actions. However, the actions will be scattered over the definitions method blocks and other classes. Moreover, other user cannot override the actions. Thus, squirrel-foundation also support define method call actions within state machine implementation in a **Convention Over Configuration** manner.  \r\n\tBasically, this means that if the method declared in state machine satisfied naming and parameters convention, it will be added into the transition action list and also be invoked at certain phase. e.g.  \r\n\t```java\r\n\tprotected void transitFromAToBOnGoToB(MyState from, MyState to, MyEvent event, MyContext context)\r\n\t```\r\n\tThe method named as **transitFrom\\[SourceStateName\\]To\\[TargetStateName\\]On\\[EventName\\]**, and parameterized as \\[MyState, MyState, MyEvent, MyContext\\] will be added into transition \"A-(GoToB)->B\" action list. When transiting from state 'A' to state 'B' on event 'GoToB', this method will be invoked.\r\n\t\r\n\t```java\r\n\tprotected void transitFromAnyToBOnGoToB(MyState from, MyState to, MyEvent event, MyContext context)\r\n\t```\r\n\t**transitFromAnyTo[TargetStateName]On[EventName]** The method will be invoked when transit from any state to state 'B' on event 'GoToB'.\r\n\t```java\r\n\tprotected void exitA(MyState from, MyState to, MyEvent event, MyContext context)\r\n\t```\r\n\t**exit[StateName]** The method will be invoked when exit state 'A'. So as the **entry[StateName]** , **exitAny** and **entryAny**.  \r\n\t\r\n\t***Other Supported Naming Patterns:***\r\n\t```\r\n\ttransitFrom[fromStateName]To[toStateName]On[eventName]When[conditionName]  \r\n    transitFrom[fromStateName]To[toStateName]On[eventName]  \r\n    transitFromAnyTo[toStateName]On[eventName]  \r\n    transitFrom[fromStateName]ToAnyOn[eventName]  \r\n    transitFrom[fromStateName]To[toStateName]          \r\n    on[eventName] \r\n    ```\r\n* **Declarative Annotation**  \r\nUse conventional way to define action method call is convenient, but sometimes user may want to give method a more meaningful name. Moreover, the java compiler cannot help user to detect the error when misspelling the method name. For this case, a declarative way is also provided to define and also to extend the state machine. Here is an example.  \r\n\t```java\r\n\t@States({\r\n        @State(name=\"A\", entryCallMethod=\"entryStateA\", exitCallMethod=\"exitStateA\"), \r\n        @State(name=\"B\", entryCallMethod=\"entryStateB\", exitCallMethod=\"exitStateB\")\r\n    })\r\n\t@Transitions({\r\n        @Transit(from=\"A\", to=\"B\", on=\"GoToB\", callMethod=\"stateAToStateBOnGotoB\"),\r\n        @Transit(from=\"A\", to=\"A\", on=\"WithinA\", callMethod=\"stateAToStateAOnWithinA\", type=TransitionType.INTERNAL)\r\n\t})\r\n\tinterface MyStateMachine extends StateMachine<MyStateMachine, MyState, MyEvent, MyContext> {\r\n\t\tvoid entryStateA(MyState from, MyState to, MyEvent event, MyContext context);\r\n\t\tvoid stateAToStateBOnGotoB(MyState from, MyState to, MyEvent event, MyContext context)\r\n\t\tvoid stateAToStateAOnWithinA(MyState from, MyState to, MyEvent event, MyContext context)\r\n\t\tvoid exitStateA(MyState from, MyState to, MyEvent event, MyContext context);\r\n\t\t...\r\n\t}\r\n\t```\r\n\tThe annotation can be defined in both implementation class of state machine or any interface that state machine will be implemented. It also can be used mixed with fluent API, which means the state machine defined in fluent API can also be extended by these annotations. (One thing you may need to be noticed, the method defined within interface must be public, which means also the method call action implementation will be public to caller.)  \r\n\t\r\n* **Converters**  \r\nIn order to declare state and event within *@State* and *@Transit*, user need to implement corresponding converters for their state(S) and event(E) type. The convert must implement Converter\\<T\\> interface, which convert the state/event to/from String.\r\n```java\r\npublic interface Converter<T> extends SquirrelComponent {\r\n    \t/**\r\n     \t* Convert object to string.\r\n     \t* @param obj converted object\r\n     \t* @return string description of object\r\n     \t*/\r\n    \tString convertToString(T obj);\r\n    \r\n    \t/**\r\n     \t* Convert string to object.\r\n     \t* @param name name of the object\r\n     \t* @return converted object\r\n     \t*/\r\n    \tT convertFromString(String name);\r\n}\r\n```  \r\nThen register these converters to *ConverterProvider*. e.g.\r\n```java\r\nConverterProvider.INSTANCE.register(MyEvent.class, new MyEventConverter());\r\nConverterProvider.INSTANCE.register(MyState.class, new MyStateConverter());\r\n```  \r\n\tNote: If you only use fluent API to define state machine, there is no need to implement corresponding converters.\r\n\t\r\n* **New State Machine Instance**  \r\nAfter user defined state machine behavior, user could create a new state machine instance through builder. Note, once the state machine instance is created from the builder, the builder cannot used to define any new element of state machine anymore.\r\n```java\r\nT newStateMachine(S initialStateId, Object... extraParams);\r\n```\r\nTo create a new state machine instance from state machine builder, you need to pass following parameters.\r\n\t1. *initialStateId*: When started, the initial state of the state machine.\r\n\t2. *extraParams*: Extra parameters that needed for create new state machine instance. Set to *\"new Object[0]\"* for no extra parameters needed.  \r\n\t\r\n\tNew state machine from state machine builder.\r\n\t```java\r\n\tMyStateMachine stateMachine = builder.newStateMachine(MyState.Initial, new Object[0]);\r\n\t```\r\n\r\n* **Fire Events**  \r\n\tAfter state machine was created, user can fire events along with context to trigger transition inside state machine. e.g.\r\n\t```java\r\n\tstateMachine.fire(MyEvent.Prepare, new MyContext(\"Testing\"));\r\n\t```\r\n\r\n## Advanced Feature\r\n* **Define Hierarchical State**  \r\nA hierarchical state may contain nested state. The child states may themselves have nested children and the nesting may proceed to any depth. When a hierarchical state is active, one and only one of its child states is active. The hierarchical state can be defined through API or annotation.\r\n```java\r\nvoid defineSequentialStatesOn(S parentStateId, S... childStateIds);\r\n```\r\n*builder.defineHierarchyOn(State.A, State.BinA, StateCinA)* defines two child states \"BinA\" and \"CinA\" under parent state \"A\", the first defined child state will also be the initial state of the hierarchical state \"A\". The same hierarchical state can also be defined through annotation, e.g.\r\n```java\r\n@States({\r\n\t\t@State(name=\"A\", entryMethodCall=\"entryA\", exitMethodCall=\"exitA\"),\r\n\t\t@State(parent=\"A\", name=\"BinA\", entryMethodCall=\"entryBinA\", exitMethodCall=\"exitBinA\", initialState=true),\r\n\t\t@State(parent=\"A\", name=\"CinA\", entryMethodCall=\"entryCinA\", exitMethodCall=\"exitCinA\")\r\n})\r\n```  \r\n\r\n* **Define Parallel State**  \r\nThe parallel state encapsulates a set of child states which are simultaneously active when the parent element is active. The  parallel state can be defined through API or annotation both. e.g.   \r\n```java  \r\n\t// defines two child states \"A1\" and \"A2\" under parent parallel state \"A\"\r\n\tbuilder.defineParallelStatesOn(MyState.A, MyState.A1, MyState.A2)\r\n```\r\nor\r\n```java  \r\n@States({\r\n\t\t@State(name=\"A\", entryCallMethod=\"enterA\", exitCallMethod=\"exitA\", compositeType=StateCompositeType.PARALLEL),\r\n\t\t@State(parent=\"A\", name=\"A1\", entryCallMethod=\"enterA1\", exitCallMethod=\"exitA1\"),\r\n\t\t@State(parent=\"A\", name=\"A2\", entryCallMethod=\"enterA2\", exitCallMethod=\"exitA2\")\r\n})\r\n```\r\n\r\n* **Using History States to Save and Restore the Current State**  \r\nThe history pseudo-state allows a state machine to remember its state configuration. A transition taking the history state as its target will return the state machine to this recorded configuration. If the 'type' of a history is \"shallow\", the state machine processor must record the direct  active children of its parent before taking any transition that exits the parent. If the 'type' of a history is \"deep\", the state machine processor must record all the active  descendants of the parent before taking any transition that exits the parent.   \r\nBoth API and annotation are supported to define history type of state. e.g.  \r\n```java  \r\n\t// defined history type of state \"A\" as \"deep\"\r\n\tbuilder.defineSequentialStatesOn(MyState.A, HistoryType.DEEP, MyState.A1, MyState.A2)\r\n```\r\nor\r\n```java  \r\n\t@State(parent=\"A\", name=\"A1\", entryCallMethod=\"enterA1\", exitCallMethod=\"exitA1\", historyType=HistoryType.DEEP)\r\n```\r\n\r\n* **Transition Types**  \r\nAccording to the UML specification, a transition may be one of these three kinds:    \r\n\r\n\t> * *Internal Transition*  \t\r\nImplies that the Transition, if triggered, occurs without exiting or entering the source State (i.e., it does not cause a state change). This means that the entry or exit condition of the source State will not be invoked. An internal Transition can be taken even if the StateMachine is in one or more Regions nested within the associated State.  \r\n\t> * *Local Transition*  \r\n\tImplies that the Transition, if triggered, will not exit the composite (source) State, but it will exit and re-enter any state within the composite State that is in the current state configuration.\r\n\t> * *External Transition*   \r\n\tImplies that the Transition, if triggered, will exit the composite (source) State\r\n\t  \r\n\r\n\tsquirrel-foundation supports both API and annotation to declare all kinds of transitions, e.g.  \r\n\t```java\r\n\tbuilder.externalTransition().from(MyState.A).to(MyState.B).on(MyEvent.A2B);\r\n\tbuilder.internalTransition().within(MyState.A).on(MyEvent.innerA);\r\n\tbuilder.localTransition().from(MyState.A).to(MyState.CinA).on(MyEvent.intoC)\r\n\t```\r\n\tor  \r\n\t```java\r\n\t@Transitions({\r\n\t\t@Transition(from=\"A\", to=\"B\", on=\"A2B\"), //default value of transition type is EXTERNAL\r\n\t\t@Transition(from=\"A\", on=\"innerA\", type=TransitionType.INTERNAL),\r\n\t\t@Transition(from=\"A\", to=\"CinA\", on=\"intoC\", type=TransitionType.LOCAL),\r\n\t})\r\n\t```\r\n\r\n* **State Machine Lifecycle Events**  \r\nDuring the lifecycle of the state machine, various events will be fired, e.g. \r\n```  \r\n|--StateMachineEvent \t\t\t\t\t\t/* Base event of all state machine event */   \r\n       |--StartEvent\t\t\t\t\t\t\t/* Fired when state machine started      */ \r\n       |--TerminateEvent\t\t\t\t\t\t/* Fired when state machine terminated   */ \r\n          |--TransitionEvent\t\t\t\t\t/* Base event of all transition event    */ \r\n             |--TransitionBeginEvent\t\t\t/* Fired when transition began           */ \r\n             |--TransitionCompleteEvent\t\t\t/* Fired when transition completed       */ \r\n             |--TransitionExceptionEvent\t\t/* Fired when transition threw exception */ \r\n             |--TransitionDeclinedListener\t\t/* Fired when transition declined        */ \r\n```\r\nUser can add a listener to listen StateMachineEvent, which means all events fired during state machine lifecycle will be caught by this listener, e.g.,\r\n```java\r\nstateMachine.addListener(new StateMachineListener<MyStateMachine, MyState, MyEvent, MyContext>() {\r\n\t\t\t@Override\r\n\t\t\tpublic void stateMachineEvent(StateMachineEvent<MyStateMachine, MyState, MyEvent, MyContext> event) {\r\n\t\t\t\t// ...\r\n\t\t\t}\r\n\t});\r\n```\r\n\r\n* **State Machine PostProcessor**  \r\n\tUser can register post processor for specific type of state machine in order to adding post process logic after state machine instantiated, e.g.  \r\n\t```java\r\n\t// 1 User defined a state machine interface\r\n\tinterface MyStateMachine extends StateMachine<MyStateMachine, MyState, MyEvent, MyContext> {\r\n\t. . .\r\n\t}\r\n\t\r\n\t// 2 Both MyStateMachineImpl and MyStateMachineImplEx are implemented MyStateMachine\r\n\tclass MyStateMachineImpl implements MyStateMachine {\r\n\t\t. . . \r\n\t}\r\n\tclass MyStateMachineImplEx implements MyStateMachine {\r\n\t\t. . .\r\n\t}\r\n\t\r\n\t// 3 User define a state machine post processor\r\n\tMyStateMachinePostProcessor implements SquirrelPostProcessor<MyStateMachine> {\r\n\t\tvoid postProcess(MyStateMachine component) {\r\n\t\t\t. . . \r\n\t\t}\r\n\t}  \r\n\t\r\n\t// 4 User register state machine post process\r\n\tSquirrelPostProcessorProvider.getInstance().register(MyStateMachine.class, MyStateMachinePostProcessor.class);\r\n\t```\r\n\tFor this case, when user created both MyStateMachineImpl and MyStateMachineImplEx instance, the registered post processor MyStateMachinePostProcessor will be called to do some work.\r\n* **State Machine Intercepter**  \r\n\tUser can register intercepter for specific type of state machine to insert custom logic during state machine lifecycle. \r\n\t```java\r\n\tpublic abstract class AbstractStateMachineIntercepter<T extends StateMachine<T, S, E, C>, S, E, C> \r\n    \timplements StateMachineIntercepter<T, S, E, C>, SquirrelPostProcessor<T> {\r\n    \t. . .\r\n    }\r\n\t```\r\n\tUser can insert custom logic at different state machine process phases by creating a state machine intercepter which is extended from *AbstractStateMachineIntercepter*. Actually, the *AbstractStateMachineIntercepter* also implemented *SquirrelPostProcessor* interface. It will add a StateMachineEvent listener into the state machine, and dispatch the method call according to the event type. Thus, the StateMachineIntercepter registration should be the same as state machine post processor.   \r\n\tBy leveraging state machine intercepter, user can implement various monitors for performance analysis, exception diagnose and so on.\r\n\t\r\n* **State Machine Diagnose**  \r\n\tUser can register various monitors as state machine intercepter to observe internal status of the state machine, like the execution performance, action calling sequence, transition progress and so on.   \r\n\tFor example, the following code is used to register an execution time monitor for state machine of *MyStateMachine* type.\r\n\t```java\r\n\tSquirrelPostProcessorProvider.getInstance().register(MyStateMachine.class, \r\n        \t\tnew TypeReference<TransitionExecTimeMonitor<MyStateMachine, MyState, MyEvent, MyContext>>() {});\r\n\t```  \r\n\tThe following code is used to monitor transition progress by adding a *TransitionProgressMonitor* to *ActionExecutor* to monitor transition action execution.\r\n\t```java\r\n\tSquirrelPostProcessorProvider.getInstance().register(\r\n        new TypeReference<ActionExecutor<MyStateMachine, MyState, MyEvent, MyContext>>(){}, \r\n        new SquirrelPostProcessor<ActionExecutor<MyStateMachine, MyState, MyEvent, MyContext>>() {\r\n\t\t\t@Override\r\n            public void postProcess(ActionExecutor<MyStateMachine, MyState, MyEvent, MyContext> component) {\r\n\t\t\t\tcomponent.addListener(new TransitionProgressMonitor<MyStateMachine, MyState, MyEvent, MyContext>());\r\n            }\r\n        }\r\n\t);\r\n\t```   \r\n\tAdd **@LogExecTime** on action method will log out the execution time of the method. And also add the @LogExecTime on state machine class will log out all the action method execution time. For example, the execution time of method *transitFromAToBOnGoToB* will be logged out.\r\n\t```java\r\n\t@LogExecTime\r\n\tprotected void transitFromAToBOnGoToB(MyState from, MyState to, MyEvent event, MyContext context)\r\n\t```\r\n\r\n## Future Plan  \r\n* Support state persistence\r\n* State machine import and export\r\n* Support sendEvent(sync) and postEvent(async)\r\n\r\n[1]: http://en.wikipedia.org/wiki/UML_state_machine\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}